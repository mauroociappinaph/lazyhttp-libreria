/**
 * Ejemplo de uso del sistema de retry autom√°tico con backoff exponencial
 *
 * Este ejemplo muestra c√≥mo configurar y utilizar la funcionalidad de reintentos
 * autom√°ticos de HttpLazy para mejorar la resiliencia de las aplicaciones ante
 * fallos temporales de red o servicios.
 */
import { HttpImplementation } from '../http/common/types';

// Creaci√≥n de un cliente HTTP mock para el ejemplo
// En una aplicaci√≥n real, importar√≠as el cliente as√≠:
// import { http } from 'httplazy';
const http: any = {
  // Implementaci√≥n b√°sica simulada para el ejemplo
  initialize: (config: any) => {
    console.log('Configuraci√≥n aplicada:', JSON.stringify(config, null, 2));
  },

  get: async (url: string, options?: any) => {
    console.log(`[GET] ${url} con opciones:`, options);
    // Simular comportamiento de retry para el ejemplo
    if (url === '/api/usuarios') {
      console.log('Simulando retry: Primer intento - Error 503');
      console.log('Simulando retry: Segundo intento - Error 503');
      console.log('Simulando retry: Tercer intento - √âxito 200');
    }

    return {
      data: { id: 1, nombre: 'Ejemplo', success: true },
      status: 200,
      headers: { 'content-type': 'application/json' }
    };
  },

  post: async (url: string, data?: any, options?: any) => {
    console.log(`[POST] ${url} con datos:`, data, 'y opciones:', options);
    return {
      data: { id: 123, success: true },
      status: 201,
      headers: { 'content-type': 'application/json' }
    };
  },

  // M√©todos restantes implementados vac√≠os para satisfacer la interfaz
  request: () => Promise.resolve({ data: {}, status: 200, headers: {} }),
  getAll: () => Promise.resolve({ data: [], status: 200, headers: {} }),
  getById: () => Promise.resolve({ data: {}, status: 200, headers: {} }),
  put: () => Promise.resolve({ data: {}, status: 200, headers: {} }),
  patch: () => Promise.resolve({ data: {}, status: 200, headers: {} }),
  delete: () => Promise.resolve({ data: {}, status: 200, headers: {} }),
  configureAuth: () => {},
  login: () => Promise.resolve({ user: {}, token: '', refreshToken: '' }),
  logout: () => Promise.resolve(),
  isAuthenticated: () => false,
  getAuthenticatedUser: () => null,
  getAccessToken: () => null,
  configureCaching: () => {},
  invalidateCache: () => {},
  invalidateCacheByTags: () => {},
  configureMetrics: () => {},
  trackActivity: () => {},
  getCurrentMetrics: () => ({})
};

// API que simula fallos aleatorios para demostrar los reintentos
const FLAKY_API_URL = 'https://flaky-api.ejemplo.com';

async function demostraci√≥nRetryAutom√°tico() {
  console.log('üöÄ Demostraci√≥n de Retry Autom√°tico con Backoff Exponencial\n');

  // 1. Configuraci√≥n global de retry
  console.log('1Ô∏è‚É£ Configurando cliente HTTP con retry autom√°tico');
  http.initialize({
    baseUrl: FLAKY_API_URL,
    timeout: 5000,
    retry: {
      enabled: true,               // Activa los reintentos autom√°ticos
      maxRetries: 3,               // N√∫mero m√°ximo de intentos
      initialDelay: 1000,          // Tiempo inicial entre intentos (ms)
      backoffFactor: 2,            // Factor de crecimiento exponencial
      retryableStatusCodes: [408, 429, 500, 502, 503, 504], // C√≥digos HTTP a reintentar
      retryableErrors: ['ECONNRESET', 'ETIMEDOUT', 'ECONNREFUSED'] // Errores de red
    }
  });

  // 2. Ejemplo de petici√≥n con retry autom√°tico global
  try {
    console.log('\n2Ô∏è‚É£ Realizando petici√≥n con configuraci√≥n global de retry');
    console.log('   Esto usar√° los valores de retry configurados globalmente');

    const resultado = await http.get('/api/usuarios');
    console.log(`   ‚úÖ Petici√≥n exitosa despu√©s de varios intentos`);
    console.log(`   üìä Datos recibidos: ${JSON.stringify(resultado.data)}`);
  } catch (error) {
    console.error(`   ‚ùå Error despu√©s de m√∫ltiples intentos: ${error.message}`);
  }

  // 3. Ejemplo de petici√≥n con opciones de retry espec√≠ficas
  try {
    console.log('\n3Ô∏è‚É£ Realizando petici√≥n con opciones de retry espec√≠ficas');
    console.log('   Esto sobrescribir√° la configuraci√≥n global para esta petici√≥n');

    const resultado = await http.get('/api/productos', {
      retryOptions: {
        maxRetries: 5,           // M√°s reintentos que la configuraci√≥n global
        initialDelay: 500,       // Tiempo inicial m√°s corto
        backoffFactor: 1.5       // Factor de crecimiento m√°s suave
      }
    });

    console.log(`   ‚úÖ Petici√≥n exitosa`);
    console.log(`   üìä Datos recibidos: ${JSON.stringify(resultado.data)}`);
  } catch (error) {
    console.error(`   ‚ùå Error despu√©s de m√∫ltiples intentos: ${error.message}`);
  }

  // 4. Ejemplo de petici√≥n sin reintentos para rutas espec√≠ficas
  try {
    console.log('\n4Ô∏è‚É£ Realizando petici√≥n desactivando los reintentos');
    console.log('   Algunas operaciones no deber√≠an reintentarse autom√°ticamente');

    const resultado = await http.post('/api/pedidos', { id: 123, total: 99.99 }, {
      retryOptions: {
        enabled: false  // Desactivar reintentos para esta petici√≥n espec√≠fica
      }
    });

    console.log(`   ‚úÖ Petici√≥n exitosa al primer intento`);
    console.log(`   üìä Datos recibidos: ${JSON.stringify(resultado.data)}`);
  } catch (error) {
    console.error(`   ‚ùå Error sin reintentos: ${error.message}`);
  }

  // 5. Comportamiento del backoff exponencial
  console.log('\n5Ô∏è‚É£ Comportamiento del backoff exponencial');
  console.log('   Con initialDelay=1000ms y backoffFactor=2:');
  console.log('   ‚Ä¢ Primer reintento: espera 1000ms');
  console.log('   ‚Ä¢ Segundo reintento: espera 2000ms (1000 * 2^1)');
  console.log('   ‚Ä¢ Tercer reintento: espera 4000ms (1000 * 2^2)');
  console.log('   ‚Ä¢ Cuarto reintento: espera 8000ms (1000 * 2^3)');
  console.log('   Este enfoque reduce la carga en servicios ya sobrecargados.');

  console.log('\n‚ú® Fin de la demostraci√≥n de retry autom√°tico');
}

// Ejecutar el ejemplo
demostraci√≥nRetryAutom√°tico().catch(error => {
  console.error('Error en la demostraci√≥n:', error);
});
