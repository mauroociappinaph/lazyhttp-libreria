"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.authInterceptors=void 0,exports.setupInterceptors=setupInterceptors,exports.refreshToken=refreshToken,exports.handleRefreshTokenFailure=handleRefreshTokenFailure;const tslib_1=require("tslib"),axios_1=tslib_1.__importDefault(require("axios")),http_errors_1=require("./http-errors"),http_config_1=require("./http-config");let isRefreshing=!1,failedRequests=[];function setupInterceptors(e=http_config_1.httpInstance){e.interceptors.request.use((e=>{var t;if(null===(t=e.url)||void 0===t?void 0:t.includes(http_config_1.AUTH_ENDPOINTS.REFRESH_TOKEN))return e;const r=localStorage.getItem(http_config_1.AUTH_STORAGE.TOKEN_KEY);return r&&(e.headers.Authorization=`Bearer ${r}`),e}),(e=>Promise.reject(e))),e.interceptors.response.use((e=>e),(async e=>{var t;const r=e.config;if(401===(null===(t=e.response)||void 0===t?void 0:t.status)&&r&&r.url&&!r.url.includes(http_config_1.AUTH_ENDPOINTS.REFRESH_TOKEN)){if(!isRefreshing){isRefreshing=!0;try{const e=await refreshToken();if(e)return localStorage.setItem(http_config_1.AUTH_STORAGE.TOKEN_KEY,e),failedRequests.forEach((e=>e())),failedRequests=[],r.headers&&(r.headers.Authorization=`Bearer ${e}`),(0,axios_1.default)(r)}catch(e){handleRefreshTokenFailure()}finally{isRefreshing=!1}}return new Promise((e=>{failedRequests.push((()=>{if(r.headers){const e=localStorage.getItem(http_config_1.AUTH_STORAGE.TOKEN_KEY);e&&(r.headers.Authorization=`Bearer ${e}`)}e((0,axios_1.default)(r))}))}))}return Promise.reject(e)}))}async function refreshToken(){var e;const t=localStorage.getItem(http_config_1.AUTH_STORAGE.REFRESH_TOKEN_KEY);if(!t)throw new http_errors_1.HttpAuthError("No refresh token available");const r=await axios_1.default.post(`${http_config_1.AUTH_ENDPOINTS.REFRESH_TOKEN}`,{refreshToken:t},{baseURL:http_config_1.httpInstance.defaults.baseURL});if(!(null===(e=r.data)||void 0===e?void 0:e.token))throw new http_errors_1.HttpAuthError("Invalid token response");return r.data.token}function handleRefreshTokenFailure(){localStorage.removeItem(http_config_1.AUTH_STORAGE.TOKEN_KEY),localStorage.removeItem(http_config_1.AUTH_STORAGE.REFRESH_TOKEN_KEY),"undefined"!=typeof window&&(window.location.href="/login")}exports.authInterceptors={setupInterceptors:setupInterceptors,refreshToken:refreshToken,handleRefreshTokenFailure:handleRefreshTokenFailure};