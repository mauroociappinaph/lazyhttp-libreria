"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.HttpAuthError=exports.HttpAbortedError=exports.HttpUnknownError=exports.HttpAxiosError=exports.HttpNetworkError=exports.HttpTimeoutError=exports.HttpError=void 0;const suggestion_service_IA_1=require("./suggestion-service-IA"),suggestionService=new suggestion_service_IA_1.SuggestionService;class HttpError extends Error{static async getSmartSuggestion(e,t){return await suggestionService.getSuggestion(e,t)}static async provideSuggestionFeedback(e,t,r,o){await suggestionService.provideFeedback(e,t,r,o)}}exports.HttpError=HttpError,HttpError.ERROR_MESSAGES={TIMEOUT:"La solicitud ha excedido el tiempo de espera",NETWORK:"Error de conexión con el servidor",UNKNOWN:"Error desconocido",ABORTED:"La solicitud fue cancelada por timeout",SESSION_EXPIRED:"La sesión ha expirado",AXIOS_ERROR:"Error de conexión con AxiosError"};class HttpTimeoutError extends HttpError{constructor(e=HttpError.ERROR_MESSAGES.TIMEOUT){super(e),this.name="HttpTimeoutError",this.suggestion="Verifica tu conexión a internet y vuelve a intentarlo",this.details={description:"La solicitud ha excedido el tiempo de espera configurado",cause:"El servidor no respondió dentro del tiempo límite especificado. Esto puede ocurrir por problemas de red, servidor sobrecargado o timeout configurado muy bajo.",solution:"1. Verifica tu conexión a internet\n2. Aumenta el timeout en la configuración\n3. Verifica si el servidor está respondiendo",example:"\n// Ejemplo de configuración con timeout personalizado\nconst http = new Http({\n  timeout: 10000 // 10 segundos\n});\n\n// También puedes configurar el timeout por petición\nconst response = await http.get('https://api.example.com/data', {\n  timeout: 5000 // 5 segundos para esta petición específica\n});\n      "}}}exports.HttpTimeoutError=HttpTimeoutError;class HttpNetworkError extends HttpError{constructor(e=HttpError.ERROR_MESSAGES.NETWORK){super(e),this.name="HttpNetworkError",this.suggestion="Verifica tu conexión a internet y vuelve a intentarlo",this.details={description:"No se pudo establecer conexión con el servidor",cause:"Problemas de conectividad, servidor no disponible, DNS no resuelto o firewall bloqueando la conexión.",solution:"1. Verifica tu conexión a internet\n2. Comprueba que el servidor esté en línea\n3. Verifica la URL y el dominio\n4. Revisa la configuración de tu firewall",example:"\n// Ejemplo de manejo de errores de red\ntry {\n  const response = await http.get('https://api.example.com/data');\n  // Procesar respuesta\n} catch (error) {\n  if (error instanceof HttpNetworkError) {\n    console.error('Error de red:', error.details?.description);\n    console.log('Solución sugerida:', error.details?.solution);\n  }\n}\n      "}}}exports.HttpNetworkError=HttpNetworkError;class HttpAxiosError extends HttpError{constructor(e=HttpError.ERROR_MESSAGES.AXIOS_ERROR){super(e),this.name="HttpAxiosError",this.suggestion="Verifica tu conexión a internet y vuelve a intentarlo",this.details={description:"Error en la petición HTTP realizada con Axios",cause:"Problemas con la configuración de Axios, formato de datos incorrecto, o respuesta del servidor no válida.",solution:"1. Verifica la configuración de la petición\n2. Revisa el formato de los datos enviados\n3. Comprueba los headers y el tipo de contenido",example:"\n// Ejemplo de configuración correcta de Axios\nconst http = new Http({\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  validateStatus: (status) => status < 500 // Acepta respuestas con status < 500\n});\n      "}}}exports.HttpAxiosError=HttpAxiosError;class HttpUnknownError extends HttpError{constructor(e=HttpError.ERROR_MESSAGES.UNKNOWN){super(e),this.name="HttpUnknownError",this.suggestion="Verifica tu conexión a internet y vuelve a intentarlo",this.details={description:"Error desconocido durante la petición HTTP",cause:"Error no categorizado o inesperado durante la ejecución de la petición.",solution:"1. Revisa los logs para más detalles\n2. Verifica la configuración general\n3. Comprueba la compatibilidad de versiones",example:"\n// Ejemplo de manejo de errores desconocidos\ntry {\n  const response = await http.get('https://api.example.com/data');\n} catch (error) {\n  if (error instanceof HttpUnknownError) {\n    console.error('Error desconocido:', error.message);\n    console.log('Detalles:', error.details);\n  }\n}\n      "}}}exports.HttpUnknownError=HttpUnknownError;class HttpAbortedError extends HttpError{constructor(e=HttpError.ERROR_MESSAGES.ABORTED){super(e),this.name="HttpAbortedError",this.suggestion="Verifica tu conexión a internet y vuelve a intentarlo",this.details={description:"La petición fue cancelada antes de completarse",cause:"La petición fue abortada manualmente o por timeout, o el usuario navegó a otra página.",solution:"1. Verifica si la petición fue cancelada intencionalmente\n2. Aumenta el timeout si es necesario\n3. Implementa reintentos automáticos",example:"\n// Ejemplo de petición con control de aborto\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 5000);\n\ntry {\n  const response = await http.get('https://api.example.com/data', {\n    signal: controller.signal\n  });\n  clearTimeout(timeoutId);\n} catch (error) {\n  if (error instanceof HttpAbortedError) {\n    console.log('Petición cancelada:', error.details?.description);\n  }\n}\n      "}}}exports.HttpAbortedError=HttpAbortedError;class HttpAuthError extends HttpError{constructor(e=HttpError.ERROR_MESSAGES.SESSION_EXPIRED){super(e),this.name="HttpAuthError",this.suggestion="Verifica tu conexión a internet y vuelve a intentarlo",this.details={description:"Error de autenticación o sesión expirada",cause:"Token de autenticación inválido, expirado o falta de credenciales necesarias.",solution:"1. Verifica que las credenciales sean correctas\n2. Renueva el token de autenticación\n3. Comprueba los permisos del usuario",example:"\n// Ejemplo de configuración con autenticación\nconst http = new Http({\n  auth: {\n    username: 'usuario',\n    password: 'contraseña'\n  }\n});\n\n// O con token\nconst http = new Http({\n  headers: {\n    'Authorization': 'Bearer tu-token-aqui'\n  }\n});\n      "}}}exports.HttpAuthError=HttpAuthError;