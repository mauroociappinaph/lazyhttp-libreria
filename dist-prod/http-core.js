"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.HttpCore=void 0;const http_helpers_1=require("./http-helpers"),http_cache_1=require("./http-cache"),http_cache_strategies_1=require("./http-cache-strategies"),http_metrics_index_1=require("./metrics/http-metrics-index"),DEFAULT_TIMEOUT=1e4,DEFAULT_RETRIES=0;class HttpCore{constructor(){this._defaultTimeout=DEFAULT_TIMEOUT,this._defaultRetries=DEFAULT_RETRIES,this._defaultHeaders={}}async request(t,e={}){if(t.startsWith("/")||t.startsWith("http")||(t=`/${t}`),e.cache){const r=http_cache_1.cacheManager.generateCacheKey(t,e);return await(0,http_cache_strategies_1.executeWithCacheStrategy)(r,(async()=>this.performRequest(t,e)),e)}return this.performRequest(t,e)}async performRequest(t,e){const{method:r="GET",headers:s={},body:a,withAuth:h=!1,timeout:i=DEFAULT_TIMEOUT,retries:c=DEFAULT_RETRIES}=e;try{http_metrics_index_1.metricsManager.trackRequest(t);const e=t.startsWith("http://")||t.startsWith("https://")?t:this._baseUrl?`${this._baseUrl}${t}`:t,u=(0,http_helpers_1.prepareHeaders)(s,h),o=await http_helpers_1.retryHandler.executeWithRetry(e,r,u,a,i||this._defaultTimeout||DEFAULT_TIMEOUT,void 0!==c?c:void 0!==this._defaultRetries?this._defaultRetries:DEFAULT_RETRIES);return"GET"!==r&&http_cache_1.cacheManager.invalidateByMethod(r,t),o}catch(t){return http_helpers_1.errorHandler.handleError(t)}}async get(t,e){return this.request(t,{...e,method:"GET"})}async getAll(t,e){var r,s;const a=(null===(r=null==e?void 0:e.params)||void 0===r?void 0:r.page)||1,h=(null===(s=null==e?void 0:e.params)||void 0===s?void 0:s.limit)||100,i=await this.request(t,{...e,method:"GET",params:{...null==e?void 0:e.params,page:a,limit:h}});return i.data&&Array.isArray(i.data)&&(i.meta={currentPage:a,totalItems:i.data.length}),i}async getById(t,e,r){return this.request(t,{...r,method:"GET",params:{id:e}})}async post(t,e,r){return this.request(t,{...r,method:"POST",body:e})}async put(t,e,r){return this.request(t,{...r,method:"PUT",body:e})}async patch(t,e,r){return this.request(t,{...r,method:"PATCH",body:e})}async delete(t,e){return this.request(t,{...e,method:"DELETE"})}async all(t,e){const r=t.map((t=>this.get(t,e)));return(await Promise.all(r)).map((t=>t.data)).filter((t=>null!==t))}}exports.HttpCore=HttpCore;