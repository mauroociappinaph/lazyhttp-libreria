"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.BaseHttpClient=void 0;const http_utils_1=require("../utils/http-utils");class BaseHttpClient{constructor(){this.baseUrl="",this.frontendUrl="",this.defaultTimeout=1e4,this.defaultRetries=0,this.defaultHeaders={},this.authConfig={},this.cacheConfig={enabled:!1,ttl:3e5},this.metricsConfig={enabled:!1},this.retryConfig={enabled:!1,maxRetries:3,initialDelay:300,backoffFactor:2,retryableStatusCodes:[408,429,500,502,503,504],retryableErrors:["ECONNRESET","ETIMEDOUT","ECONNREFUSED"]}}initialize(e){e.baseUrl&&(this.baseUrl=e.baseUrl),e.frontendUrl&&(this.frontendUrl=e.frontendUrl),void 0!==e.timeout&&(this.defaultTimeout=e.timeout),void 0!==e.retries&&(this.defaultRetries=e.retries),e.headers&&(this.defaultHeaders={...this.defaultHeaders,...e.headers}),e.auth&&(this.authConfig={...this.authConfig,...e.auth}),e.cache&&(this.cacheConfig={...this.cacheConfig,...e.cache}),e.metrics&&(this.metricsConfig={...this.metricsConfig,...e.metrics}),e.retry&&(this.retryConfig={...this.retryConfig,...e.retry}),e.proxy&&(this.proxyConfig=e.proxy),this.onInitialize(e)}onInitialize(e){}buildRequestUrl(e){return http_utils_1.HttpUtils.buildUrl(this.baseUrl,e)}prepareHeaders(e={},t=!1){const r=http_utils_1.HttpUtils.mergeHeaders(this.defaultHeaders,e);return t&&this.getAccessToken()&&(r.Authorization=`Bearer ${this.getAccessToken()}`),r}parseErrorMessage(e){return http_utils_1.HttpUtils.parseErrorMessage(e)}generateCacheKey(e,t,r){return http_utils_1.HttpUtils.generateCacheKey(e,t,r)}async get(e,t){return this.request("GET",e,void 0,t)}async getAll(e,t){return this.request("GET",e,void 0,t)}async getById(e,t,r){const i=`${e}/${t}`;return this.request("GET",i,void 0,r)}async post(e,t,r){return this.request("POST",e,t,r)}async put(e,t,r){return this.request("PUT",e,t,r)}async patch(e,t,r){return this.request("PATCH",e,t,r)}async delete(e,t){return this.request("DELETE",e,void 0,t)}configureAuth(e){this.authConfig={...this.authConfig,...e}}async login(e){throw new Error("login() debe ser implementado por la clase derivada")}async logout(){throw new Error("logout() debe ser implementado por la clase derivada")}isAuthenticated(){throw new Error("isAuthenticated() debe ser implementado por la clase derivada")}getAuthenticatedUser(){throw new Error("getAuthenticatedUser() debe ser implementado por la clase derivada")}getAccessToken(){throw new Error("getAccessToken() debe ser implementado por la clase derivada")}configureCaching(e){this.cacheConfig={...this.cacheConfig,...e}}invalidateCache(e){throw new Error("invalidateCache() debe ser implementado por la clase derivada")}invalidateCacheByTags(e){throw new Error("invalidateCacheByTags() debe ser implementado por la clase derivada")}configureMetrics(e){this.metricsConfig={...this.metricsConfig,...e}}trackActivity(e){throw new Error("trackActivity() debe ser implementado por la clase derivada")}getCurrentMetrics(){throw new Error("getCurrentMetrics() debe ser implementado por la clase derivada")}configureProxy(e){this.proxyConfig=e}calculateRetryDelay(e,t){const r=(null==t?void 0:t.initialDelay)||this.retryConfig.initialDelay||300,i=(null==t?void 0:t.backoffFactor)||this.retryConfig.backoffFactor||2;return r*Math.pow(i,e)}shouldRetry(e,t,r){var i,s;if(!(void 0!==(null==r?void 0:r.enabled)?r.enabled:this.retryConfig.enabled))return!1;return!(t>=(void 0!==(null==r?void 0:r.maxRetries)?r.maxRetries:this.retryConfig.maxRetries||3))&&(!(!e.status||!(null===(i=this.retryConfig.retryableStatusCodes)||void 0===i?void 0:i.includes(e.status)))||!(!e.code||!(null===(s=this.retryConfig.retryableErrors)||void 0===s?void 0:s.includes(e.code))))}}exports.BaseHttpClient=BaseHttpClient;