import { HttpImplementation, RequestOptions, ApiResponse, AuthConfig, UserCredentials, AuthInfo, CacheConfig, MetricsConfig, ProxyConfig, HttpMethod, RetryConfig, RetryOptions } from '../types';
export declare abstract class BaseHttpClient implements HttpImplementation {
    protected baseUrl: string;
    protected frontendUrl: string;
    protected defaultTimeout: number;
    protected defaultRetries: number;
    protected defaultHeaders: Record<string, string>;
    protected authConfig: Partial<AuthConfig>;
    protected cacheConfig: Partial<CacheConfig>;
    protected metricsConfig: Partial<MetricsConfig>;
    protected retryConfig: Partial<RetryConfig>;
    protected proxyConfig?: ProxyConfig;
    abstract request<T>(method: HttpMethod, url: string, data?: any, options?: RequestOptions): Promise<ApiResponse<T>>;
    initialize(config: any): void;
    protected onInitialize(_config: any): void;
    protected buildRequestUrl(endpoint: string): string;
    protected prepareHeaders(customHeaders?: Record<string, string>, withAuth?: boolean): Record<string, string>;
    protected parseErrorMessage(error: any): string;
    protected generateCacheKey(method: string, url: string, data?: any): string;
    get<T>(url: string, options?: RequestOptions): Promise<ApiResponse<T>>;
    getAll<T>(url: string, options?: RequestOptions): Promise<ApiResponse<T[]>>;
    getById<T>(url: string, id: string | number, options?: RequestOptions): Promise<ApiResponse<T>>;
    post<T>(url: string, data?: any, options?: RequestOptions): Promise<ApiResponse<T>>;
    put<T>(url: string, data?: any, options?: RequestOptions): Promise<ApiResponse<T>>;
    patch<T>(url: string, data?: any, options?: RequestOptions): Promise<ApiResponse<T>>;
    delete<T>(url: string, options?: RequestOptions): Promise<ApiResponse<T>>;
    configureAuth(config: Partial<AuthConfig>): void;
    login(_credentials: UserCredentials): Promise<AuthInfo>;
    logout(): Promise<void>;
    isAuthenticated(): boolean;
    getAuthenticatedUser(): any | null;
    getAccessToken(): string | null;
    configureCaching(config: Partial<CacheConfig>): void;
    invalidateCache(_pattern: string): void;
    invalidateCacheByTags(_tags: string[]): void;
    configureMetrics(config: Partial<MetricsConfig>): void;
    trackActivity(_type: string): void;
    getCurrentMetrics(): any;
    configureProxy(config: ProxyConfig): void;
    protected calculateRetryDelay(retryCount: number, options?: RetryOptions): number;
    protected shouldRetry(error: any, retryCount: number, options?: RetryOptions): boolean;
}
