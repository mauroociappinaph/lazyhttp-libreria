export * from './core';
import { HttpImplementation, RequestOptions, ProxyConfig, StreamConfig } from '../common/types';
declare class BrowserHttpClient implements HttpImplementation {
    request<_T>(_method: any, _url: string, _data?: any, _options?: RequestOptions): Promise<any>;
    get<T>(url: string, options?: RequestOptions): Promise<any>;
    getAll<T>(url: string, options?: RequestOptions): Promise<any>;
    getById<T>(url: string, id: string | number, options?: RequestOptions): Promise<any>;
    post<T>(url: string, data?: any, options?: RequestOptions): Promise<any>;
    put<T>(url: string, data?: any, options?: RequestOptions): Promise<any>;
    patch<T>(url: string, data?: any, options?: RequestOptions): Promise<any>;
    delete<T>(url: string, options?: RequestOptions): Promise<any>;
    configureAuth(_config: any): void;
    login(_credentials: any): Promise<{
        user: null;
        token: string;
    }>;
    logout(): Promise<void>;
    isAuthenticated(): boolean;
    getAuthenticatedUser(): null;
    getAccessToken(): null;
    initialize(_config: any): void;
    configureCaching(_config: any): void;
    invalidateCache(_pattern: string): void;
    invalidateCacheByTags(_tags: string[]): void;
    configureMetrics(_config: any): void;
    trackActivity(_type: string): void;
    getCurrentMetrics(): {};
    streamBasic(url: string, config?: StreamConfig): Promise<ReadableStream<any>>;
}
export declare const http: BrowserHttpClient;
export declare const request: <_T>(_method: any, _url: string, _data?: any, _options?: RequestOptions) => Promise<any>;
export declare const get: <T>(url: string, options?: RequestOptions) => Promise<any>;
export declare const getAll: <T>(url: string, options?: RequestOptions) => Promise<any>;
export declare const getById: <T>(url: string, id: string | number, options?: RequestOptions) => Promise<any>;
export declare const post: <T>(url: string, data?: any, options?: RequestOptions) => Promise<any>;
export declare const put: <T>(url: string, data?: any, options?: RequestOptions) => Promise<any>;
export declare const patch: <T>(url: string, data?: any, options?: RequestOptions) => Promise<any>;
export declare const del: <T>(url: string, options?: RequestOptions) => Promise<any>;
export declare const configureAuth: (_config: any) => void;
export declare const login: (_credentials: any) => Promise<{
    user: null;
    token: string;
}>;
export declare const logout: () => Promise<void>;
export declare const isAuthenticated: () => boolean;
export declare const getAuthenticatedUser: () => null;
export declare const getAccessToken: () => null;
export declare const initialize: (_config: any) => void;
export declare const configureCaching: (_config: any) => void;
export declare const invalidateCache: (_pattern: string) => void;
export declare const invalidateCacheByTags: (_tags: string[]) => void;
export declare const configureMetrics: (_config: any) => void;
export declare const trackActivity: (_type: string) => void;
export declare const getCurrentMetrics: () => {};
export declare const stream: (url: string, config?: StreamConfig) => Promise<ReadableStream<any>>;
export declare const configureProxy: (_config: ProxyConfig) => boolean;
export * from '../common/types';
