"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.HttpAuthManager=void 0;const http_auth_1=require("../../http-auth"),http_metrics_index_1=require("../../metrics/http-metrics-index");class HttpAuthManager{configureAuth(t){(0,http_auth_1.configureAuth)(t)}async login(t){const e=await(0,http_auth_1.login)(t),r={accessToken:e.access_token,isAuthenticated:!0,refreshToken:e.refresh_token};return r.isAuthenticated&&http_metrics_index_1.metricsManager.startTracking(),r}async logout(){const t=await http_metrics_index_1.metricsManager.stopTracking();return t&&console.log(`[HTTP] Sesi√≥n finalizada - Tiempo activo: ${Math.round(t.activeTime/1e3)}s, Peticiones: ${t.requestCount}`),(0,http_auth_1.logout)()}isAuthenticated(){return(0,http_auth_1.isAuthenticated)()}async getAuthenticatedUser(){return(0,http_auth_1.getAuthenticatedUser)()}getAccessToken(){return(0,http_auth_1.getAccessToken)()}async refreshToken(){return(0,http_auth_1.refreshToken)()}async handleRefreshTokenFailure(){return(0,http_auth_1.handleRefreshTokenFailure)()}decodeToken(t){return(0,http_auth_1.decodeToken)(t)}isTokenExpired(t){return(0,http_auth_1.isTokenExpired)(t)}storeToken(t,e){(0,http_auth_1.storeToken)(t,e)}getToken(t){return(0,http_auth_1.getToken)(t)}removeToken(t){(0,http_auth_1.removeToken)(t)}}exports.HttpAuthManager=HttpAuthManager;