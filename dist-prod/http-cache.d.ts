import { ApiResponse, CacheConfig, CacheOptions, CacheStrategy, HttpMethod, RequestOptions } from './http.types';
export declare function configure(config: Partial<CacheConfig>): void;
export declare function isEnabled(): boolean;
export declare function generateCacheKey(endpoint: string, options?: RequestOptions): string;
export declare function get<T>(key: string): ApiResponse<T> | undefined;
export declare function set<T>(key: string, value: ApiResponse<T>, options?: CacheOptions): void;
export declare function remove(key: string): void;
export declare function clear(): void;
export declare function invalidate(pattern: string): void;
export declare function invalidateByTags(tags: string[]): void;
export declare function invalidateByMethod(method: HttpMethod, endpoint: string): void;
export declare function shouldUseCache(method: HttpMethod, options?: RequestOptions): boolean;
export declare function getStrategy(options?: RequestOptions): CacheStrategy;
export declare const cacheManager: {
    configure: typeof configure;
    isEnabled: typeof isEnabled;
    generateCacheKey: typeof generateCacheKey;
    get: typeof get;
    set: typeof set;
    delete: typeof remove;
    clear: typeof clear;
    invalidate: typeof invalidate;
    invalidateByTags: typeof invalidateByTags;
    invalidateByMethod: typeof invalidateByMethod;
    shouldUseCache: typeof shouldUseCache;
    getStrategy: typeof getStrategy;
};
