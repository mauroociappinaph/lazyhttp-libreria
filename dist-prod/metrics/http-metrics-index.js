"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.metricsManager=void 0;const http_config_1=require("../http-config"),StateManager=(()=>{const e={config:{enabled:!1,reportingInterval:0,trackRoutes:!1,trackEvents:[]},metrics:null,intervals:{reporting:null}};return{getConfig:()=>e.config,setConfig:t=>{e.config={...e.config,...t}},getMetrics:()=>e.metrics,setMetrics:t=>{e.metrics=t},updateMetrics:t=>{e.metrics&&t(e.metrics)},getReportingInterval:()=>e.intervals.reporting,setReportingInterval:t=>{e.intervals.reporting=t},isEnabled:()=>e.config.enabled&&null!==e.metrics}})(),IdGenerator={generateSessionId:()=>Date.now().toString(36)+Math.random().toString(36).substring(2)},TimeTracker={updateActivityTime:()=>{StateManager.updateMetrics((e=>{const t=Date.now();e.activeTime+=t-e.lastActivity,e.lastActivity=t}))}},NotificationService={notifyMetricsUpdate:()=>{const e=StateManager.getConfig(),t=StateManager.getMetrics();e.onMetricsUpdate&&t&&e.onMetricsUpdate({...t})}},ActivityTracker={setupTracking:()=>{var e;if("undefined"==typeof window)return;const t=()=>{TimeTracker.updateActivityTime(),NotificationService.notifyMetricsUpdate()};["mousemove","keydown","click","scroll","touchstart"].forEach((e=>window.addEventListener(e,t)));const r=StateManager.getConfig();(null===(e=r.trackEvents)||void 0===e?void 0:e.length)&&r.trackEvents.forEach((e=>{window.addEventListener(e,(()=>{StateManager.updateMetrics((t=>{t.activities[e]=(t.activities[e]||0)+1}))}))}))},trackSpecificActivity:e=>{StateManager.isEnabled()&&StateManager.updateMetrics((t=>{t.activities[e]=(t.activities[e]||0)+1,t.lastActivity=Date.now()}))},trackRequest:e=>{StateManager.isEnabled()&&(StateManager.updateMetrics((e=>{e.requestCount++,e.lastActivity=Date.now()})),RouteTracker.trackRouteVisit(e))}},RouteTracker={setupTracking:()=>{if("undefined"==typeof window)return;if(!StateManager.getConfig().trackRoutes)return;const e=()=>{window.location.pathname&&RouteTracker.trackRouteVisit(window.location.pathname)};e(),window.addEventListener("popstate",e)},trackRouteVisit:e=>{if(!StateManager.isEnabled())return;StateManager.getConfig().trackRoutes&&e.startsWith("/")&&StateManager.updateMetrics((t=>{t.visitedRoutes.includes(e)||t.visitedRoutes.push(e)}))}},MetricsReporter={setupReporting:()=>{const e=StateManager.getReportingInterval();e&&clearInterval(e);const t=StateManager.getConfig();if(t.enabled&&t.reportingInterval&&t.reportingInterval>0){const e=setInterval(MetricsReporter.sendMetricsToServer,t.reportingInterval);StateManager.setReportingInterval(e)}},sendMetricsToServer:async()=>{const e=StateManager.getConfig(),t=StateManager.getMetrics();if(e.enabled&&t&&e.endpoint)try{TimeTracker.updateActivityTime();const r=await fetch(e.endpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!r.ok)throw new Error(`Error al enviar métricas: ${r.status}`);http_config_1.debugConfig.logRequests&&console.log("[HTTP:METRICS] Métricas enviadas al servidor",t)}catch(e){console.error("[HTTP:METRICS] Error al enviar métricas",e)}}},SessionManager={startSession:()=>{StateManager.getConfig().enabled&&(StateManager.setMetrics({loginTime:Date.now(),lastActivity:Date.now(),activeTime:0,requestCount:0,activities:{},visitedRoutes:[],sessionId:IdGenerator.generateSessionId()}),ActivityTracker.setupTracking(),RouteTracker.setupTracking(),http_config_1.debugConfig.logRequests&&console.log("[HTTP:METRICS] Iniciado seguimiento de sesión",StateManager.getMetrics()))},endSession:async()=>{if(!StateManager.isEnabled())return null;TimeTracker.updateActivityTime(),StateManager.updateMetrics((e=>{e.logoutTime=Date.now()}));const e={...StateManager.getMetrics()};return await MetricsReporter.sendMetricsToServer(),http_config_1.debugConfig.logRequests&&console.log("[HTTP:METRICS] Finalizado seguimiento de sesión",e),StateManager.setMetrics(null),e},getCurrentSession:()=>StateManager.isEnabled()?(TimeTracker.updateActivityTime(),{...StateManager.getMetrics()}):null},MetricsController={configure:e=>{StateManager.setConfig(e),MetricsReporter.setupReporting(),StateManager.getConfig().enabled&&console.log("[HTTP:METRICS] Sistema de métricas configurado",StateManager.getConfig())},startTracking:()=>{SessionManager.startSession()},stopTracking:async()=>SessionManager.endSession(),getCurrentMetrics:()=>SessionManager.getCurrentSession(),trackRequest:e=>{ActivityTracker.trackRequest(e)},trackActivity:e=>{ActivityTracker.trackSpecificActivity(e)}};exports.metricsManager={configure:MetricsController.configure,startTracking:MetricsController.startTracking,stopTracking:MetricsController.stopTracking,trackRequest:MetricsController.trackRequest,trackActivity:MetricsController.trackActivity,getCurrentMetrics:MetricsController.getCurrentMetrics};