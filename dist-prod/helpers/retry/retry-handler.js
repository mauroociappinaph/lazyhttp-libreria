"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.retryHandler=void 0;const error_handler_1=require("../error/error-handler"),request_executor_1=require("../request/request-executor"),response_processor_1=require("../response/response-processor"),axios_1=require("axios"),logger_1=require("../logging/logger");exports.retryHandler={async executeWithRetry(e,r,t,o,s,n){try{const n=new AbortController,i=setTimeout((()=>{n.abort()}),s);try{const s=await request_executor_1.requestExecutor.executeRequest(e,r,t,o,n.signal);return response_processor_1.responseProcessor.processResponse(s)}finally{clearTimeout(i)}}catch(i){return this.handleRetry(i,(()=>this.executeWithRetry(e,r,t,o,s,n-1)),n)}},async handleRetry(e,r,t){return t>0&&this.isRetryableError(e)?(logger_1.logger.warn(`Reintentando peticiÃ³n... (${t} intentos restantes)`,{error:e}),await this.waitForRetry(t),r()):error_handler_1.errorHandler.handleError(e)},isRetryableError(e){var r;if((0,axios_1.isAxiosError)(e)){const t=null===(r=e.response)||void 0===r?void 0:r.status;return!e.response||!t||t>=500}return!1},async waitForRetry(e){const r=500*Math.pow(2,3-e);return new Promise((e=>setTimeout(e,r)))}};