"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.retryHandler=void 0;const tslib_1=require("tslib"),axios_1=tslib_1.__importStar(require("axios")),http_errors_1=require("../http-errors"),http_helpers_1=require("../http-helpers");exports.retryHandler={async executeWithRetry(r,e,t,s,o,i){try{const i=new AbortController,a=setTimeout((()=>i.abort()),o),n=await axios_1.default.request({url:r,method:e,headers:t,data:s,signal:i.signal});return clearTimeout(a),http_helpers_1.responseProcessor.processResponse(n)}catch(a){if(i>0&&this.isRetryableError(a))return this.handleRetry(a,(()=>this.executeWithRetry(r,e,t,s,o,i-1)),i);throw a}},async handleRetry(r,e,t){return await this.waitForRetry(t),e()},isRetryableError:r=>r instanceof http_errors_1.HttpNetworkError||(!(!(0,axios_1.isAxiosError)(r)||r.response)||(!!((0,axios_1.isAxiosError)(r)&&r.response&&r.response.status>=500)||!(!(0,axios_1.isAxiosError)(r)||!r.response||429!==r.response.status))),async waitForRetry(r){const e=100*Math.pow(2,5-r);return new Promise((r=>setTimeout(r,e)))}};