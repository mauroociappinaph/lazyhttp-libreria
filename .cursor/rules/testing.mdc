---
description:
globs:
alwaysApply: false
---
# üß™ HTTPLazy - Reglas de Testing Unitario con Jest

Este documento define las reglas para implementar pruebas unitarias en la biblioteca `httplazy` usando Jest. Su objetivo es garantizar una cobertura adecuada, modularidad, mantenibilidad y confiabilidad del c√≥digo.

---

## ‚úÖ Reglas Generales

### 1. **Regla del M√≥dulo Aislado**

Cada prueba debe enfocarse en una sola unidad de c√≥digo (una funci√≥n, clase o m√©todo), sin depender de otras implementaciones.

---

### 2. **Regla del Mock Controlado**

Usar `jest.mock` para reemplazar dependencias externas (HTTP, almacenamiento, servicios externos, etc.). Se debe evitar el uso real de `fetch`, `localStorage`, etc.

```ts
jest.mock('../cache/LocalStorageManager');
```

---

### 3. **Regla de Organizaci√≥n por Dominio**

Las pruebas deben estar organizadas en carpetas paralelas al c√≥digo fuente. Ejemplo:

```
/src/http/client/BrowserHttpClient.ts
/tests/http/client/BrowserHttpClient.test.ts
```

---

### 4. **Regla del Patr√≥n AAA (Arrange-Act-Assert)**

Cada test debe estar dividido claramente en tres secciones:

* Arrange: Preparar inputs y mocks
* Act: Ejecutar el c√≥digo
* Assert: Verificar resultados esperados

```ts
test('should call fetch with correct URL', () => {
  // Arrange
  const client = new BrowserHttpClient();

  // Act
  client.get('/users');

  // Assert
  expect(fetch).toHaveBeenCalledWith('/users');
});
```

---

### 5. **Regla de Casos Lim√≠trofes y Errores**

Todo m√©todo debe tener tests para:

* Casos normales
* Casos l√≠mite (inputs vac√≠os, nulos, etc.)
* Errores esperados

---

### 6. **Regla del Cliente Mockeado**

Para probar interceptores y managers, se debe utilizar un `MockHttpClient` que simule respuestas controladas.

```ts
class MockHttpClient extends BaseHttpClient {
  async get() {
    return { status: 200, data: 'ok' };
  }
}
```

---

### 7. **Regla de Cobertura Completa de Interfaces**

Cada implementaci√≥n que cumpla una interfaz (`IHttpClient`, `ICacheManager`, etc.) debe tener una prueba que cubra todos sus m√©todos p√∫blicos.

---

### 8. **Regla de Verbo Descriptivo**

El nombre del test debe describir claramente el comportamiento esperado.

```ts
test('get() should return cached response when available', ...)
```

---

### 9. **Regla de No Redundancia**

Evitar probar l√≥gica de dependencias que ya est√°n cubiertas por sus propios tests (testear s√≥lo el comportamiento del m√≥dulo actual).

---

### 10. **Regla de Automatizaci√≥n y Watch Mode**

El script `npm run test` debe correr todos los tests, y `npm run test:watch` debe ejecutar en modo vigilancia para desarrollo continuo.

---

## üß™ Scripts Sugeridos en package.json

```json
{
  "scripts": {
    "test": "jest --coverage",
    "test:watch": "jest --watchAll",
    "test:ci": "jest --runInBand"
  }
}
```

---

## üìÅ Estructura sugerida de carpetas de test

```
/tests
  /http
    /client
      BrowserHttpClient.test.ts
    /server
  /auth
  /cache
  /metrics
  /interceptors
  /factories
```

---

Estas reglas aseguran que el desarrollo de `httplazy` sea acompa√±ado por un sistema de pruebas riguroso y sostenible. Cualquier nuevo m√≥dulo o clase debe venir acompa√±ado de sus pruebas unitarias siguiendo esta gu√≠a.
