---
description:
globs:
alwaysApply: true
---
üìê HTTPLazy - Design & Extension Rules

Este archivo define las reglas arquitect√≥nicas para extender y mantener la biblioteca httplazy de forma modular, escalable y robusta.

‚úÖ Reglas de Extensibilidad

1. Regla de Dominio Independiente

Cada funcionalidad nueva debe estar encapsulada en un dominio independiente sin dependencias cruzadas.

Ejemplos:

/auth/ ‚Üí manejo de OAuth2, JWT, API Keys

/metrics/ ‚Üí integraciones con Prometheus, Datadog

/cache/ ‚Üí adaptadores para Memory, Redis, etc.

2. Regla del Adaptador

Toda nueva integraci√≥n externa debe implementarse como un adaptador que extiende una clase o interfaz base.

Ejemplos:

WebSocketHttpClient ‚ûù extiende BaseHttpClient

RedisCacheManager ‚ûù implementa ICacheManager

DatadogMetricsTracker ‚ûù implementa IMetricsTracker

3. Regla de Interceptor Composable

Interceptors deben ser composables, encadenables y desacoplados del cliente.

client.useInterceptor(new RetryInterceptor({ retries: 3 }));
client.useInterceptor(new AuthInterceptor(tokenManager));

4. Regla del Cliente Mock

Toda l√≥gica del cliente debe poder testearse con un MockHttpClient sin conexi√≥n externa.

MockHttpClient implementa IHttpClient y simula errores, timeouts, respuestas controladas.

5. Regla del Provider de Autenticaci√≥n

Las estrategias de autenticaci√≥n deben ser intercambiables v√≠a una interfaz IAuthProvider.

Ejemplos:

JWTAuthProvider

OAuth2Provider

ApiKeyAuthProvider

6. Regla de Inicializaci√≥n Extendida

Toda subclase de cliente o manager debe poder extender onInitialize() sin afectar el n√∫cleo.

Permite configurar o precargar comportamientos espec√≠ficos.

7. Regla del Registro de Componentes

Toda implementaci√≥n nueva debe registrarse en una f√°brica o en un contenedor de servicios.

Ejemplos:

HttpManagersFactory.register('redis', RedisCacheManager)

AuthProvidersRegistry.register('oauth2', OAuth2Provider)

8. Regla de Contrato Estructurado

Todos los m√≥dulos deben respetar contratos definidos en /types/index.ts.

Esto garantiza reemplazabilidad y evita errores de integraci√≥n.

9. Regla del Selector por Entorno

Debe haber una capa que seleccione autom√°ticamente implementaciones seg√∫n el entorno.

Ejemplos:

Si window est√° definido, usar BrowserHttpClient

Si process existe, usar NodeHttpClient

10. Regla de Reportabilidad

Todas las acciones cr√≠ticas deben poder ser interceptadas o medidas (trazabilidad/m√©tricas).

Aplica a: request, response, error, retry, timeout, etc.

üìå Sugerencia de estructura de carpetas

/src
  /auth
  /cache
  /metrics
  /http
    /client
    /server
    /common
  /testing
  /protocols
    /grpc
    /websocket
  /types
  /factories
  /interceptors

Estas reglas permiten escalar httplazy con nuevas capacidades sin romper la base del sistema ni generar deuda t√©cnica. Cualquier contribuci√≥n o extensi√≥n futura debe respetar este conjunto de reglas.
